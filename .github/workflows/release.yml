name: Release

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  update-branch:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
          
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
      - name: Determine version bump
        id: bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_TITLE_LOWER=$(echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]')
          
          # Major version bump patterns
          if [[ $PR_TITLE_LOWER == breaking:* ]] || [[ $PR_TITLE_LOWER == major:* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          
          # Minor version bump patterns
          elif [[ $PR_TITLE_LOWER == feat:* ]] || \
               [[ $PR_TITLE_LOWER == feature:* ]] || \
               [[ $PR_TITLE_LOWER == new:* ]] || \
               [[ $PR_TITLE_LOWER == minor:* ]] || \
               [[ $PR_TITLE_LOWER == update:* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          
          # Patch version bump patterns
          elif [[ $PR_TITLE_LOWER == fix:* ]] || \
               [[ $PR_TITLE_LOWER == build:* ]] || \
               [[ $PR_TITLE_LOWER == maint:* ]] || \
               [[ $PR_TITLE_LOWER == test:* ]] || \
               [[ $PR_TITLE_LOWER == patch:* ]] || \
               [[ $PR_TITLE_LOWER == docs:* ]] || \
               [[ $PR_TITLE_LOWER == chore:* ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          
          # Default to patch for unrecognized prefixes
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Update version in branch
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=$(npm version ${{ steps.bump.outputs.bump }} --no-git-tag-version)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
      - name: Generate Changelog
        run: |
          pnpm add -D conventional-changelog-cli
          # Regenerate the entire changelog from scratch
          npx conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
      - name: Commit and push changes
        run: |
          git add CHANGELOG.md package.json
          git commit -m "chore: update version to ${{ env.NEW_VERSION }} and changelog"
          git push origin HEAD:${{ github.head_ref }}

  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
          
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get version from merged branch
        run: |
          MERGED_VERSION=$(node -p "require('./package.json').version")
          echo "MERGED_VERSION=$MERGED_VERSION" >> $GITHUB_ENV

      - name: Build
        run: pnpm run build
          
      - name: Create .npmrc for automation token
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTOMATION_TOKEN }}" > .npmrc
          
      - name: Publish to npm
        run: npm publish --access public
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.MERGED_VERSION }}
          release_name: Release ${{ env.MERGED_VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
